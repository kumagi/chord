
 // ask node n to find the successor of id
 n.find_successor(id)
   if (id  (n, successor) )
     return successor;
   else
     // forward the query around the circle
     n0 = closest_preceding_node(id);
     return n0.find_successor(id);
 // search the local table for the highest predecessor of id
 n.closest_preceding_node(id)
   for i = m downto 1
     if (finger[i](n,id))
       return finger[i];
   return n;

	 
 // create a new Chord ring.
 n.create()
   predecessor = nil;
   successor = n;
 // join a Chord ring containing node n'.
 n.join(n')
   predecessor = nil;
   successor = n'.find_successor(n);
 // called periodically. verifies n’s immediate
 // successor, and tells the successor about n.
 n.stabilize()
   x = successor.predecessor;
   if (x(n, successor))
     successor = x;
   successor.notify(n);
 // n' thinks it might be our predecessor.
 n.notify(n')
   if (predecessor is nil or n'(predecessor, n))
     predecessor = n';
 // called periodically. refreshes finger table entries.
 // next stores the index of the finger to fix
 n.fix_fingers()ppp
   next = next + 1;
   if (next > m)
     next = 1;
   finger[next] = find_successor(n+2next − 1);
 // called periodically. checks whether predecessor has failed.
 n.check_predecessor()
   if (predecessor has failed)
     predecessor = nil;
